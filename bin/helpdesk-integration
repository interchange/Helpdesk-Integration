#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Helpdesk::Integration;
use YAML qw/LoadFile Dump/;
use Getopt::Long;
use Data::Dumper;
use Date::Parse;
use Cwd;
binmode STDOUT, ":encoding(utf-8)";

my ($subject,
    $from,
    $comment,
    $help,
    $copy_labels,
    $dry_run,
    $threshold,
    $workers,
    $project,
    $force,
    $debug,
    $todo_list,
    $set_source_owner,
    $set_start_date,
    $set_due_date,
    $assign_source_to,
    $bts_subject,
    $ignore_images,
    $transactions,
    $repo,
    $mail_is_attached,
    $status,
    $queue);

# defaults
my $source_string = '';
my $target_string = '';


my %links;
my %search;

my $removed_options_warning = <<'REMOVED';

Please note that the following options have been removed because
reduntant and sometimes confusing:

 * Source ticket number:  --bts-ticket, --gh-issue, --tw-task, --source-ticket
   They used to do the same thing. Instead, please use

    --source <mysource>=<ticket>

   E.g.: --source rt=150

 * Target ticket number: --ticket

   Use the more concise option (symmetric with the --source option)

     --target <mytarget>=<ticket>

   E.g.: --target rt=191

REMOVED

GetOptions (
            "source=s"  => \$source_string,
            "target=s"  => \$target_string,
            "subject=s" => \$subject,
            "from=s"    => \$from,
            "comment"   => \$comment, #boolean
            "queue=s"   => \$queue,
            "repo=s"    => \$repo,
            "workers=s" => \$workers,
            "project=s"   => \$project,
            "dry-run"   => \$dry_run,
            "force"     => \$force,
            "debug"     => \$debug,
            "threshold=i" => \$threshold,
            "help"      => \$help,
            "source-owner=s" => \$assign_source_to,
            "give-source-to-worker" => \$set_source_owner,
            "ignore-images" => \$ignore_images,
            "bts-subject=s" => \$bts_subject,
            "start-date=s"  => \$set_start_date,
            "due-date=s"  => \$set_due_date,
            "transactions=s" => \$transactions,
            "copy-labels" => \$copy_labels,
            "link=s" => \%links,
            "search:s" => \%search,
            "status=s" => \$status,
            'attached-mail' => \$mail_is_attached
           ) or die $removed_options_warning;

$threshold ||= 5;

my $conf_file = $ARGV[0] || getcwd() . "/mconf.yml";

if ($help || (! -f $conf_file)) {
    show_help();
    print "Tried to use $conf_file\n";
    exit 2;
}

my ($source, $source_ticket) = split(/=/, $source_string, 2);
my ($target, $target_ticket) = split(/=/, $target_string, 2);


my $conf = LoadFile($conf_file);
die "Bad configuration file $conf_file" unless $conf;

my $helpdsk = Helpdesk::Integration->new(debug_mode => $debug,
                                             configuration => $conf);

if ($ignore_images) {
    $helpdsk->ignore_images(1);
}

$helpdsk->set_source($source || "imap");

if (%search) {
    # print Dumper(\%search);
    unless ($helpdsk->source->can('free_search')) {
        die "search is not supported for " . $helpdsk->source->type . " type\n";
    }
    # map the flags if passed
    if ($subject) {
        $search{'--subject'} = $subject;
    }
    if ($from) {
        $search{'--from'} = $from;
    }
    if ($workers) {
        $search{'--workers'} = $workers;
    }
    if (my $search_status = $status || delete $search{'--status'}) {
        $helpdsk->source->default_search_status($search_status);
    }
    foreach my $ticket ($helpdsk->source->free_search(%search)) {
        print '#' . $ticket->id . ' ' . $ticket->subject . ' '
          . $ticket->url . "\n";
    }
    exit;
}

if ($transactions) {
    unless ($helpdsk->source->type eq 'rt') {
        print "Setting filter\n";
        die "--transactions is supported for RT only\n";
    }
    my %trxids = map { $_ => 1 } split(/[\s,]+/, $transactions);
    my $filter = sub {
        my $msg = shift;
        my $trxid = $msg->trxid;
        return unless $trxid;
        return $trxids{$trxid};
    };
    $helpdsk->filter($filter);
}

if ($helpdsk->source->type eq 'imap') {
    if ($mail_is_attached) {
        $helpdsk->source->mail_is_attached(1);
    }
    unless ($subject || $from) {
        warn "No search parameter specified! This would take the whole INBOX!\n";
        warn "Dry-run mode forced\n";
        $dry_run = 1;
    }
}

if ($set_start_date || $set_due_date) {
    die "Missing id to set the date!" unless $source_ticket;

    my %todo = (
                set_start_date => str2time($set_start_date),
                set_due_date   => str2time($set_due_date),
               );

    foreach my $k (keys %todo) {
        if (my $epoch = $todo{$k}) {
            $helpdsk->source->$k( $source_ticket, $epoch );
        }
    }
    $dry_run = 1;
}


$helpdsk->source->search_params({subject => $subject,
                                 from => $from,
                                 ticket => $source_ticket,
                                });

$helpdsk->source->search_target;

# precedence: command line, derived target name from custom field, "rt"
$helpdsk->set_target($target || $helpdsk->source->target_name || "rt");

if ($copy_labels) {
    unless ($helpdsk->source->type eq 'github' and
            $helpdsk->target->type eq 'github') {
        die "--copy-labels works only when source and target are github";
    }
    $helpdsk->target->set_labels($helpdsk->source->get_labels);
    exit;
}

# aliases

if ($repo) {
    if ($helpdsk->target->type eq 'github') {
        if (!$queue) {
            $queue = $repo;
        }
        else {
            die "repo and queue are alias, you set both, exiting\n";
        }
    }
    else {
        warn "Ignored option --repo $repo, not a github target\n";
    }
}


if ($workers) {
  $helpdsk->target->workers($workers);
}

# could come from the configuration too
my @workers_array = $helpdsk->target->list_workers;

if (@workers_array) {
    $helpdsk->target->assign_tickets(@workers_array);
}

if ($set_source_owner) {
    if (@workers_array) {
        warn "Assigning source to workers\n";
        $helpdsk->source->assign_tickets(@workers_array);
    }
    else {
        warn "No workers found to assign";
    }
}
elsif ($assign_source_to) {
    $helpdsk->source->assign_tickets(split(/\s*,\s*/, $assign_source_to));
}


# print Dumper($helpdsk->imap->folders_more);
# $helpdsk->imap->select("INBOX.RT-backup-Archive");
# print Dumper($helpdsk->imap->search("ALL"));



my @mails = $helpdsk->summary;

unless (@mails) {
    die "No message to export found!\n";
}

print join("\n", @mails);
exit if $dry_run;

if (!$force and @mails > $threshold) {
    warn "Total mail examined: " . scalar(@mails) . ". Threshold exceeded ($threshold), exiting\n";
    warn "Use --force to override or set an higher --threshold\n";
    exit;
}

if (!$target_ticket && $comment) {
    warn "You're creating a ticket, the --comment option is ignored, bailing out";
    exit;
}

# preparation
$target_ticket ||= $helpdsk->source->target_id;
$helpdsk->target->append($target_ticket) if $target_ticket;

$helpdsk->target->subject($bts_subject) if $bts_subject;

$queue ||= $helpdsk->source->target_queue;
$helpdsk->target->queue($queue) if $queue;

$helpdsk->target->is_comment($comment) if $comment;

my $out = $helpdsk->execute;

print "\n";

if ($out) {
    print "$out\n";
}

elsif (my $err = $helpdsk->error) {
    if ($err->[0] eq 'no_image_support') {
        print "Couldn't move tickets because the backend doesn't support images\n";
        print $err->[1] . "\n";
        print "Use the --ignore-images switch to override\n";
        exit 2;
    }
    else {
        die $err->[1];
    }
}

if ($set_source_owner || $assign_source_to) {
    print "Setting source owner for $source_ticket\n";
    $helpdsk->source->set_owner($source_ticket);
}

if (%links) {
    if ($helpdsk->target->can('link_to_ticket')) {
        foreach my $k (keys(%links)) {
            my @dests = split(/[\s,]+/, $links{$k});
            foreach my $dst (@dests) {
                $helpdsk->target->link_to_ticket($dst, $k);
            }
        }
    }
    else {
        warn "Linking is not implemented for the target system\n";
    }
}


exit;

sub show_help {
    print <<'HELP';

Usage: helpdesk-integration [ options ] [ configuration.file.yml ]

The configuration file argument is optional and defaults to "mconf.yml"
located in the current directory.

Multiple instance are supported. Every defined instance must have its
own settings listed as in the example below.

Common keys: type, server, user, password.

If you want to decrypt and pass around encrypted mails from IMAP, you
need to specify the "key" option in the configuration, with the key's
id of your GnuPG key. We assume that you know what you are doing.

You can also add the "passphrase" option to the IMAP stanza to decrypt
your private key. This option is strongly discouraged. Use a GPG agent
instead and do not specify it.

imap:
  key: ASDFASDF
  type: imap
  server: "my.server.net"
  user: 'marco@linuxia.de'
  password: "xxxxxxxxxx"
  backup_folder: "RT-backup-Archive" 
  ssl: 0
imap2:
  type: imap
  server: "my.server.net"
  user: 'marco@linuxia.de'
  password: "xxxxxxxxx"
  backup_folder: "RT-backup-Archive" 
  ssl: 0
rt:
  type: rt
  server: http://localhost/rt
  user: root
  password: xxxxxx
  target_name_field: "Remote system"
  target_id_field: "Teamwork id"
  target_queue_field: "Remote queue"

Options to define the source and target:

  --source <string>
    (<string> must exist in the configuration file). Defaults to "imap"

  --target <string>
    (<string> must exist in the configuration file). Defaults to "rt"
  

The target and the source may have the form "<target>=<ticket>", e.g.
--target rt=150 or --source teamwork=12341234, to specify that you
want to source a specific ticket or to append to an existing one. This
form replaces the removed options --ticket, --bts-ticket, --gh-issue,
--tw-task, --source-ticket.

If no target ticket is provided, a new ticket will be created using
the first mail, and the other will be added as correspondence (for RT).

Options for fetching the messages:

  --subject '<string>'

    The mails with the subject containing the given string will be
    added to RT. It's relevant only if the source is an imap type.

  --from '<string>'

    The mails with the from header containing the given string will be
    added to RT. It's relevant only if the source is an imap type.

   --transactions '<comma separated ids>'

    A list of transactions id (RT only) to cherry-pick from an RT ticket

   --attached-mail

     (IMAP only) Search for an attached mail in the attachment and use
     that as the real mail

Options for setting the Start and Due dates. These two options operate
on the source instance and after setting the date the script will
print the summary and exit.

  --start-date '<string>'

  --due-date '<string>'


Options for adding to RT

  --bts-subject "<New subject>"

    Overwrite the subject email when setting the subject of the
    ticket. This applies for RT and TW.

  --workers <comma-separated list of username or emails>

    Assign the task to a user on creation. Depending on the backend,
    the user must already be present and have the required
    permissions. Works on TW and RT (setting the owner).

  --dry-run

    When this flag is set, no operation is performed on the target
    mails, but they are just listed (with the from, to, subject, date
    header and the first 50 characters of the body.

  --repo '<my-repo>'

    Alias for queue when the target type is github (override the
    configuration).

  --comment

    If the comment flag is set, the mails will be added as comment
    when adding a mail to ticket. By default correspondence is added.
    This option is ignored if a new ticket is being created from the
    email in RT.

  --queue '<string>'

    The target queue. Defaults to "General". For RT, the queue must
    exist. For Teamwork, if it doesn't exist the task list will be
    created in the project specified in the configuration.

  --threshold <num>

    The script will refuse to do anything if the number of the
    returned mails is greater than than <num> (defaults to 5), because
    if the search is too generic we will end up slurping most or all
    the INBOX. To override this you can use the --force options

  --source-owner <name>

    Assign the source ticket to the specified user. It's quite
    possible that RT refuse to do it, if the user is missing the
    permission to own the tickets.

  --give-source-to-worker

    Boolean. If you specified --workers, you can try this to set the
    owner of the source, assigning it to the same user you assigned in
    the target.

  --link <type>=<id1,id2,id3>

    Repeatable with different types. RT only. On the target ticket
    will be created links of type <type> to the list of comma
    separated ticket ids. The type is case insensitive and underscores
    can be added for better readability. So, depends_on is the same as
    dependson and DependsOn (the real name).

  --copy-labels

    Only valid if both target and source are github repos. Copy and/or
    update the labels of the source repo to the target repo

  --force

    Don't look at the threshold and just do the job.

  --debug

    Don't archive the mails moving them out of INBOX

  --search key=value (repeatable)

    Search the remote system for key and values. The queries are
    'AND'ed.

    The supported keys depends on the backend. For RT, something like
    this will search for open tickets owned and opened by marco.

      helpdesk-integration --source rt --search status=open --search owner=marco --search requestor=marco

    For a github issues, see L<Helpdesk::Integration::GitHub>

      helpdesk-integration --source github --search state=open --search assignee=melmothx

    The search will also obey the --from, --subject and --workers
    options if passed, mapping them to the appropriate keys.

    For RT searches, you can negate the value with a ! prefix. E.g.
    --search owner='!Nobody'

  --status [ open | closed | all ]

    Used only for searches.

    Override the default_search_status (C<open>), which can also be
    set in the configuration stanza for the given instance.

    If you pass the system-specific key to --search, e.g. for github
    C<--search state=open> or C<--search status=stalled> for RT, this
    is ignored.


Please note that the mails are not deleted but moved into the folder
specified in the imap_default_folder configuration directive.

If the parsed message has one or more iCal attachments, the body is
ignored and the ics is used instead. Each ical event will generate its
own ticket, there will be no appending.

HELP

}


